README - Projeto de Tecnologias Emergentes

Aplicação: Sistema de Gerenciamento de Tarefas

Este projeto foi desenvolvido como parte da disciplina de Tecnologias Emergentes e consiste em um sistema de gerenciamento de tarefas que permite criar, ler, atualizar e excluir tarefas. Os dados das tarefas são persistidos em um banco de dados MongoDB.

Ambiente de Desenvolvimento:

Sistema Operacional: Windows 10
IDE: Visual Studio Code
Python: versão 3.9.5
Node.js: versão 14.17.0
MongoDB: versão 4.4.6
Linguagem de Programação, Frameworks e Banco de Dados:

Linguagem de Programação: Python
Framework Backend: Flask
Framework Frontend: React
Banco de Dados: MongoDB

Instruções de Instalação e Execução:
Clone o repositório do projeto:
git clone https://github.com/SrTecc/TecnologiaEmergentes.git

Acesse o diretório do projeto:
cd TecnologiaEmergentes

Configuração do Backend:
Crie um ambiente virtual (opcional, mas recomendado):
python -m venv venv

Ative o ambiente virtual:
Windows:
venv\Scripts\activate

Linux/Mac:
source venv/bin/activate

Instale as dependências do Flask:
pip install -r backend/requirements.txt

Configure as variáveis de ambiente para o Flask:
Windows (PowerShell):
$env:FLASK_APP = "app.py"
$env:FLASK_ENV = "development"

Linux/Mac:
export FLASK_APP=app.py
export FLASK_ENV=development

Execute o servidor do Flask:
flask run

Configuração do Frontend:
Acesse o diretório do frontend:
cd frontend

Instale as dependências do React:
npm install

Execute o servidor de desenvolvimento do React:
npm start

Requisitos de Sistema:

Python 3.9 ou superior
Node.js 14 ou superior
MongoDB 4.4 ou superior
Contribuição:

Se desejar contribuir para o projeto, siga as orientações a seguir:
Faça um fork do repositório.
Crie um branch para a sua feature/correção: git checkout -b minha-feature.
Faça as alterações desejadas.
Realize os commits com mensagens descritivas: git commit -m "Minha mensagem".
Faça o push para o branch criado: git push origin minha-feature.
Abra um Pull Request no repositório original.
Práticas de Código Limpo:

Durante o desenvolvimento da aplicação, foram aplicadas as seguintes práticas de código limpo:
Utilização de nomes descritivos para variáveis, funções e classes.
Divisão do código em módulos e funções com responsabilidades bem definidas.
Organização do código de acordo com as convenções da linguagem e dos frameworks utilizados.
Utilização de comentários claros para explicar trechos de código complexos.
Testes Automatizados:

Foram criados testes automatizados para verificar o funcionamento correto das principais funcionalidades da aplicação. Os testes abrangem as operações de criação, leitura, atualização e exclusão de tarefas.
Padrão de Projeto (opcional):

No desenvolvimento da aplicação, foi aplicado o padrão de projeto MVC (Model-View-Controller). O modelo (Model) representa a estrutura de dados e as regras de negócio, a visão (View) trata da apresentação visual da aplicação e o controlador (Controller) coordena as interações entre o modelo e a visão.